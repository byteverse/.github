on:
  workflow_call:
    inputs:
      artifact-name:
        # The artifact name. Specify this if the artifact name is different from the repo's name.
        required: false
        type: string
        default: ${{ github.event.repository.name }}

env:
  hackage-ghc-version: 9.6.3
  pkg-version: "${{ inputs.artifact-name }}-${{ github.ref_name }}"

# Concurrency settings.
# Only one job of this workflow will run at a time.
# If a job is currently running, it'll be canceled.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Acquire access token
        id: access-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GITBOT_APP_ID }}
          private-key: ${{ secrets.GITBOT_APP_PRIVATE_KEY }}

      - name: Import common files
        uses: actions/checkout@v4
        with:
          repository: 'byteverse/.github'
          path: '.github-repo'
          ref: 'main'

      - name: Run Pre-Release Checks
        run: |
          ./.github-repo/.github/check-release.sh "${{ github.ref_name }}" "${{ vars.MAINTAINER_EMAIL }}"
          if [ $? -ne 0 ];
          then
            echo "${RESULT}"
            exit 1
          fi

      - name: Check Build Dependencies
        run: |
          name="workflow_dependencies.sh"
          echo "Checking for $name hook..."
          file="${{ github.workspace }}/.github/$name"
          if [ -x "$file" ]; then
            echo "Running hook: $name"
            RESULT=$(. "$file")
            if [ $? -ne 0 ]; then
              echo "$RESULT"
              exit 1
            fi
          else
            echo "Skipping. No hook found."
          fi

      - name: Set up GHC ${{ env.hackage-ghc-version }}
        uses: haskell-actions/setup@latest
        id: setup
        with:
          ghc-version: ${{ env.hackage-ghc-version }}
          cabal-version: 'latest'

      - name: Configure the build
        run: |
          # We purposely don't set the --enable-tests flag in order to run tests
          # the same way that Hackage does. If Hackage changes how they execute test suites in
          # the future, we need to reflect that change here also.
          cabal configure --disable-benchmarks --disable-documentation
          cabal update

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all --test-show-details=direct

      - name: Check cabal file
        run: cabal check

      - name: Build source archive
        id: build
        run: cabal sdist --output-directory ./dist-newstyle

      - name: Build documentation archive
        run: |
          cabal haddock \
            --haddock-html-location="'https://hackage.haskell.org/package/${{ env.pkg-version }}/docs'" \
            --haddock-hyperlink-source \
            --haddock-quickjump \
            --haddock-for-hackage

      - name: Create release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ steps.access-token.outputs.token }}
        with:
          allowUpdates: true
          artifacts: "./dist-newstyle/*.tar.gz"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true

      - name: Upload Release Candidate to Hackage
        run: |
          TARBALL="./dist-newstyle/${{ env.pkg-version }}.tar.gz"
          cabal upload -u "${{ secrets.HACKAGE_USER }}" -p "${{ secrets.HACKAGE_PASSWORD }}" "${TARBALL}"
